<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/socket.io/socket.io.js"></script>
    <script src="/public/js/socket/system_socket.js" defer></script>
    <script src="/public/js/socket/game_socket.js" defer></script>
    <title>오목 게임</title>
    <style>
        .board {
            display: grid;
            grid-template-columns: repeat(18, 18px);
            grid-template-rows: repeat(18, 18px);
            gap: 2px;
            width: 360px;
            height: 360px;
            border: 2px solid #000;
            background-color: #f2b06d;
        }

        .cell {
            width: 100%;
            height: 100%;
            background-color: #fff;
            border: 1px solid #000;
            cursor: pointer;
            background-color: #f2b06d;
        }

        .cell.black {
            background-color: #000;
            border: 1px solid #fff;
            border-radius: 50%;
        }

        .cell.white {
            background-color: #fff;
            border: 1px solid #000;
            border-radius: 50%;
        }
        .black-circle{
            width:30px;
            height:30px;
            border-radius: 50%;
            background-color: black;
            margin:5px;
        }
        .white-circle{
            width:30px;
            height:30px;
            border-radius: 50%;
            border-color: black;
            border-style: solid;
            border-width: thin;
            background-color: white;
            margin:5px;
        }
        .player-info{
            display: flex;
        }
        span{
            align-self: center;
        }
    </style>
</head>
<body>
    <div class="board" id="board"></div>
    <div class="player-info">
        <div class="black-circle"></div>
        <span id="black">a</span>
    </div>
    <div class="player-info">
        <div class="white-circle"></div>
        <span id="white">b</span>
    </div>
    <button type="button" onclick="show()">보여줘</button>
</body>
    <script>
        const socket = io('/game');
        const user_id = '<%= user_id %>'
        const user1 = '<%= user1 %>'
        const user2 = '<%= user2 %>'
        const nickname = '<%= nickname %>'
        const room_id = 'game&<%= user1 %>&<%= user2 %>'
        const name_space = '/game'

        let socketInfoList;
        
        let player_info;
        let suffle;
        let choose_flag = false;
        let role;
        let turn;
        console.log('role',role)
        console.log('turn',turn)


        function show(){
            console.log(socketInfoList);
        }
        
        function socketSearch(nickname){
            console.log('serch socket',socketInfoList)
            const member = socketInfoList.find((e) => e.nickname === nickname);
            if(!member){
                alert('유저가 접속중이지 않습니다')
            }
            return member.socket_id;
        }

        function firstPlayer(){
            const rand = Math.floor(Math.random() * 2);
            return rand;
        }

        const board = document.getElementById('board');
        const cells = [];
        let currentPlayer = 'black';

        // 보드 생성
        for (let i = 0; i < 18; i++) {
            cells[i] = [];
            for (let j = 0; j < 18; j++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.row = i;
                cell.dataset.col = j;
                board.appendChild(cell);
                cells[i][j] = cell;

                cell.addEventListener('click', () => {
                    console.log('turn',turn);
                    console.log('player',role[turn])
                    if (cell.classList.contains('black') || cell.classList.contains('white')) {
                        return;
                    }
                    if(role[turn] === nickname){
                        console.log('dataset',cell.dataset)
                        socket.emit('ejs_choose',nickname,room_id,cell.dataset);
                        cell.classList.add(currentPlayer);
                        turn = (turn + 1) % 2
                    } else {
                        if(choose_flag){
                            cell.classList.add(currentPlayer);
                            turn = (turn + 1) % 2
                        } else {
                            return;
                        }
                    }

                    if (checkWin(parseInt(cell.dataset.row), parseInt(cell.dataset.col))) {
                        alert(`${currentPlayer.toUpperCase()} 플레이어가 승리했습니다!`);
                        resetGame();
                    } else {
                        currentPlayer = currentPlayer === 'black' ? 'white' : 'black';
                    }
                });
            }
        }

        function simulateClick(row, col) {
            // row와 col을 기반으로 클릭할 셀을 선택하고 클릭 이벤트를 생성
            const cell = cells[row][col]; // cells 배열에 셀 요소들이 저장되어 있다고 가정
            const clickEvent = new MouseEvent('click', {
                bubbles: true,
                cancelable: true,
                view: window,
            });

            // 선택한 셀에 클릭 이벤트를 디스패치
            cell.dispatchEvent(clickEvent);
        }
        
        // 승리 확인 함수 (5개 연속인지 확인)
        function checkWin(row, col) {
            // 가로 확인
            let count = 1;
            for (let i = col + 1; i < 18 && cells[row][i].classList.contains(currentPlayer); i++) count++;
            for (let i = col - 1; i >= 0 && cells[row][i].classList.contains(currentPlayer); i--) count++;
            if (count >= 5) return true;

            // 세로 확인
            count = 1;
            for (let i = row + 1; i < 18 && cells[i][col].classList.contains(currentPlayer); i++) count++;
            for (let i = row - 1; i >= 0 && cells[i][col].classList.contains(currentPlayer); i--) count++;
            if (count >= 5) return true;

            // 대각선 확인 (오른쪽 위에서 왼쪽 아래로)
            count = 1;
            for (let i = row - 1, j = col + 1; i >= 0 && j < 18 && cells[i][j].classList.contains(currentPlayer); i--, j++) count++;
            for (let i = row + 1, j = col - 1; i < 18 && j >= 0 && cells[i][j].classList.contains(currentPlayer); i++, j--) count++;
            if (count >= 5) return true;

            // 대각선 확인 (왼쪽 위에서 오른쪽 아래로)
            count = 1;
            for (let i = row - 1, j = col - 1; i >= 0 && j >= 0 && cells[i][j].classList.contains(currentPlayer); i--, j--) count++;
            for (let i = row + 1, j = col + 1; i < 18 && j < 18 && cells[i][j].classList.contains(currentPlayer); i++, j++) count++;
            if (count >= 5) return true;

            return false;
        }

        // 게임 초기화
        function resetGame() {
            for (let i = 0; i < 18; i++) {
                for (let j = 0; j < 18; j++) {
                    cells[i][j].classList.remove('black', 'white');
                }
            }
            currentPlayer = 'black';
        }
    </script>
</html>