<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js"></script>
    <title>Document</title>
    <style>
        /* 모달 백그라운드 */
        .searchModal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 10; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }
     
        /* 모달 컨텐츠박스 */
        .search-modal-content {
            background-color: #fefefe;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 35%; /* Could be more or less, depending on screen size */
        }
        /* 모달 하단 버튼영역 div */
        .modalBtnDiv {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            
        }
        /* div 안 모달 버튼 */
        .modalCloseDiv {
            width: 300px;
            margin-top: 5px;
        }
    </style>
</head>

<body>
    <div id="login_button_div">
        <button id='sign_up_visible_btn' onclick="signUpVisible()"> 회원가입 </button>
        <button id='sign_in_visible_btn' onclick="signInVisible()"> 로그인 </button>
    </div>
    <div id="after_login_div">
        <button onclick="cookieAuthCheck()">쿠키 인증 체크</button><br/>
        <a href="/profile">프로필 페이지로 이동</a> <br/>
        <button onclick="userLogOut()">로그아웃</button>
    </div>
    <div id="sign_up_div" hidden>
        <div>회원가입</div>
        <form name="signup-form">
            <input type="text" name="name" placeholder="이름"/><br/>
            <input type="text" name="userid" placeholder="아이디"><br/>
            <input type="password" name="pw" placeholder="비밀번호"><br/>

            <label for="gender">성별:</label>
            <select name="gender" id="gender">
                <option value="남성">남성</option>
                <option value="여성">여성</option>
                <option value="기타">기타</option>
            </select><br />

            <label for="birth">생년월일:</label>
            <select name="year" id="birth-year">
            </select>
            <select name="month" id="birth-month">
            </select>
            <select name="day" id="birth-day">
            </select><br />

            <button type="button" onclick="userSignUp()">회원가입</button>
        </form>
    </div>
    <br/>
    <div id="sign_in_div" hidden>
        <div>로그인</div>
        <form name="signin-form">
            <input type="text" name="userid" placeholder="아이디"><br/>
            <input type="password" name="pw" placeholder="비밀번호"><br/>
            <button type="button" onclick="userSignin()">로그인</button>
        </form>
    </div>
    <br/>
    <button onclick="authKaKao()">카톡!</button> <br/>
    <button onclick="logoutKaKao()">카톡 로그아웃</button> <br/>
    <br/>
    <a href="/new">게시글 작성</a>

    <!-- 프로필 수정 모달 시작 (구현중) -->
    <div id="modal" class="searchModal">
        <div class="search-modal-content">
            <div class="page-header">
                <h1>프로필 작성 안내</h1>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-12">
                            <h3>더 나은 서비스 제공을 위해 프로필을 작성해주세요.</h3>
                        </div>
                    </div>
                </div>
            </div>
            <hr>
                <div class="modalBtnDiv">
                <div class="modalCloseDiv" style="cursor:pointer;background-color:skyblue;text-align: center;padding-bottom: 10px;padding-top: 10px;" onClick="moveProfile();">
                    <span class="modalCloseBtn" style="font-size: 13pt;">
                        프로필 작성
                    </span>
                </div>
                <div class="modalCloseDiv" style="cursor:pointer;background-color:#DDDDDD;text-align: center;padding-bottom: 10px;padding-top: 10px;" onClick="closeModal();">
                    <span class="modalCloseBtn" style="font-size: 13pt;">
                        닫기
                    </span>
                </div>
            </div>
        </div>
    </div>
    <!-- 프로필 수정 모달 끝 -->
 
</body>
<script>
    let isLogin = JSON.parse('<%= isLogin %>')
    const login_button_div = document.getElementById('login_button_div');
    const after_login_div = document.getElementById('after_login_div');
    const sign_up_div = document.getElementById('sign_up_div');
    const sign_in_div = document.getElementById('sign_in_div');
    loginAdj(isLogin);

    function authKaKao() {
        document.location.href = "/signup/kakao";
    }
    
    function logoutKaKao(){
        document.location.href = "/kakao/leave";
    }

    // function kakaoTokenAuth(){
    //     documnet.location.href = '/kakao/auth';
    // }

    function loginAdj(isLogin){
        if(isLogin){
            login_button_div.hidden = true;
            after_login_div.hidden = false;
        } else {
            login_button_div.hidden = false;
            after_login_div.hidden = true;
        }
    }

    function signUpVisible(){
        if(sign_up_div.hidden){
            sign_up_div.hidden = false;
        } else{
            sign_up_div.hidden = true;
        }
    }
    function signInVisible(){
        if(sign_in_div.hidden){
            sign_in_div.hidden = false;
        } else{
            sign_in_div.hidden = true;
        }
    }
    const yearDropdown = document.getElementById('birth-year');
    for (let year = new Date().getFullYear(); year >= 1900; year--) {
        const option = document.createElement('option');
        option.value = year;
        option.text = year;
        yearDropdown.appendChild(option);
    }

    const monthDropdown = document.getElementById('birth-month');
    for (let month = 1; month <= 12; month++) {
        const option = document.createElement('option');
        option.value = month;
        option.text = month;
        monthDropdown.appendChild(option);
    }

    const dayDropdown = document.getElementById('birth-day');
    for (let day = 1; day <= 31; day++) {
        const option = document.createElement('option');
        option.value = day;
        option.text = day;
        dayDropdown.appendChild(option);
    }


    async function userSignUp() {
        const signUpForm = document.forms["signup-form"];
        try {
            const data = {
                user_name: signUpForm.name.value,
                login_id: signUpForm.userid.value,
                login_pw: signUpForm.pw.value,
                gender: signUpForm.gender.value,
                birth: `${signUpForm.year.value}-${signUpForm.month.value}-${signUpForm.day.value}`,
            };
            const res = await axios({
                method: "post",
                url: "/signup",
                data,
            });
            alert(res.data.message);
            if (res.data.result) {
                sign_up_div.hidden = true;
                sign_in_div.hidden = false;
            }
        } catch (error) {
            console.log(error);
        }
    }


    async function userSignin() {
        const signInForm = document.forms["signin-form"];
        try {
            const data = {
                login_id: signInForm.userid.value,
                login_pw: signInForm.pw.value,
            }
            const res = await axios({
                method: "post",
                url: "/signin",
                data,
            })
            alert(res.data.message);
            if (res.data.result) {
                document.location.assign('/profile');
            }
        } catch (error) {
            console.log(error);
        }
    }
    async function userLogOut() {
        const res = await axios({
            method: "post",
            url: "/logout",
        })
        console.log("res", res)
        isLogin = false;
        loginAdj(isLogin);
    }

    async function cookieAuthCheck(){
        const res = await axios({
            method:'post',
            url:'/auth'
        })
        console.log("auth res",res);
    }
</script>
<script>
    const socket1 = io();
    const socket2 = io();
    // 네임 스페이스 '/'의 경우에는 생략가능 (링크 개념이라)
    // 이렇게 소켓을 여러개 가져와 쓸 수도 있는 것 같다
    console.log("socket1", socket1);
    console.log("socket2", socket2);
    socket1.emit('userLog')
</script>

<script>
    //프로필 수정 모달(구현중)///////
    if(isLogin) {
        jQuery(document).ready(function () {
            // $("#modal").show(); ///////////현재 모달 틀만 구성, 카카오 로그인 쪽 해결되면 입력 받을 정보에 따라 수정 예정
        });
        function closeModal() {
            $('.searchModal').hide();
        };
        function moveProfile() {
            window.location.href="/profile/edit"
        }
    }
    //프로필 수정 모달///////
</script>

</html>